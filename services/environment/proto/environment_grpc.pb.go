// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/environment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvironmentClient is the client API for Environment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentClient interface {
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEnvironmentsForUser(ctx context.Context, in *GetEnvironmentsForUserRequest, opts ...grpc.CallOption) (*GetEnvironmentsForUserResponse, error)
	GetEnvironmentDetails(ctx context.Context, in *GetEnvironmentDetailsRequest, opts ...grpc.CallOption) (*GetEnvironmentDetailsResponse, error)
	GetPublicPrototypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicPrototypesResponse, error)
	BidirectionalTerminal(ctx context.Context, opts ...grpc.CallOption) (Environment_BidirectionalTerminalClient, error)
	CreateRoom(ctx context.Context, opts ...grpc.CallOption) (Environment_CreateRoomClient, error)
}

type environmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentClient(cc grpc.ClientConnInterface) EnvironmentClient {
	return &environmentClient{cc}
}

func (c *environmentClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scholarlabs.services.environment.Environment/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) GetEnvironmentsForUser(ctx context.Context, in *GetEnvironmentsForUserRequest, opts ...grpc.CallOption) (*GetEnvironmentsForUserResponse, error) {
	out := new(GetEnvironmentsForUserResponse)
	err := c.cc.Invoke(ctx, "/scholarlabs.services.environment.Environment/GetEnvironmentsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) GetEnvironmentDetails(ctx context.Context, in *GetEnvironmentDetailsRequest, opts ...grpc.CallOption) (*GetEnvironmentDetailsResponse, error) {
	out := new(GetEnvironmentDetailsResponse)
	err := c.cc.Invoke(ctx, "/scholarlabs.services.environment.Environment/GetEnvironmentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) GetPublicPrototypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicPrototypesResponse, error) {
	out := new(GetPublicPrototypesResponse)
	err := c.cc.Invoke(ctx, "/scholarlabs.services.environment.Environment/GetPublicPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) BidirectionalTerminal(ctx context.Context, opts ...grpc.CallOption) (Environment_BidirectionalTerminalClient, error) {
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[0], "/scholarlabs.services.environment.Environment/BidirectionalTerminal", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentBidirectionalTerminalClient{stream}
	return x, nil
}

type Environment_BidirectionalTerminalClient interface {
	Send(*BidirectionalTerminalRequest) error
	Recv() (*BidirectionalTerminalResponse, error)
	grpc.ClientStream
}

type environmentBidirectionalTerminalClient struct {
	grpc.ClientStream
}

func (x *environmentBidirectionalTerminalClient) Send(m *BidirectionalTerminalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *environmentBidirectionalTerminalClient) Recv() (*BidirectionalTerminalResponse, error) {
	m := new(BidirectionalTerminalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *environmentClient) CreateRoom(ctx context.Context, opts ...grpc.CallOption) (Environment_CreateRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[1], "/scholarlabs.services.environment.Environment/CreateRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentCreateRoomClient{stream}
	return x, nil
}

type Environment_CreateRoomClient interface {
	Send(*CreateRoomRequest) error
	Recv() (*CreateRoomResponse, error)
	grpc.ClientStream
}

type environmentCreateRoomClient struct {
	grpc.ClientStream
}

func (x *environmentCreateRoomClient) Send(m *CreateRoomRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *environmentCreateRoomClient) Recv() (*CreateRoomResponse, error) {
	m := new(CreateRoomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnvironmentServer is the server API for Environment service.
// All implementations must embed UnimplementedEnvironmentServer
// for forward compatibility
type EnvironmentServer interface {
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*emptypb.Empty, error)
	GetEnvironmentsForUser(context.Context, *GetEnvironmentsForUserRequest) (*GetEnvironmentsForUserResponse, error)
	GetEnvironmentDetails(context.Context, *GetEnvironmentDetailsRequest) (*GetEnvironmentDetailsResponse, error)
	GetPublicPrototypes(context.Context, *emptypb.Empty) (*GetPublicPrototypesResponse, error)
	BidirectionalTerminal(Environment_BidirectionalTerminalServer) error
	CreateRoom(Environment_CreateRoomServer) error
	mustEmbedUnimplementedEnvironmentServer()
}

// UnimplementedEnvironmentServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentServer struct {
}

func (UnimplementedEnvironmentServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedEnvironmentServer) GetEnvironmentsForUser(context.Context, *GetEnvironmentsForUserRequest) (*GetEnvironmentsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentsForUser not implemented")
}
func (UnimplementedEnvironmentServer) GetEnvironmentDetails(context.Context, *GetEnvironmentDetailsRequest) (*GetEnvironmentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentDetails not implemented")
}
func (UnimplementedEnvironmentServer) GetPublicPrototypes(context.Context, *emptypb.Empty) (*GetPublicPrototypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicPrototypes not implemented")
}
func (UnimplementedEnvironmentServer) BidirectionalTerminal(Environment_BidirectionalTerminalServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalTerminal not implemented")
}
func (UnimplementedEnvironmentServer) CreateRoom(Environment_CreateRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedEnvironmentServer) mustEmbedUnimplementedEnvironmentServer() {}

// UnsafeEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServer will
// result in compilation errors.
type UnsafeEnvironmentServer interface {
	mustEmbedUnimplementedEnvironmentServer()
}

func RegisterEnvironmentServer(s grpc.ServiceRegistrar, srv EnvironmentServer) {
	s.RegisterService(&Environment_ServiceDesc, srv)
}

func _Environment_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scholarlabs.services.environment.Environment/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_GetEnvironmentsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetEnvironmentsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scholarlabs.services.environment.Environment/GetEnvironmentsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetEnvironmentsForUser(ctx, req.(*GetEnvironmentsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_GetEnvironmentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetEnvironmentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scholarlabs.services.environment.Environment/GetEnvironmentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetEnvironmentDetails(ctx, req.(*GetEnvironmentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_GetPublicPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetPublicPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scholarlabs.services.environment.Environment/GetPublicPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetPublicPrototypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_BidirectionalTerminal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnvironmentServer).BidirectionalTerminal(&environmentBidirectionalTerminalServer{stream})
}

type Environment_BidirectionalTerminalServer interface {
	Send(*BidirectionalTerminalResponse) error
	Recv() (*BidirectionalTerminalRequest, error)
	grpc.ServerStream
}

type environmentBidirectionalTerminalServer struct {
	grpc.ServerStream
}

func (x *environmentBidirectionalTerminalServer) Send(m *BidirectionalTerminalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *environmentBidirectionalTerminalServer) Recv() (*BidirectionalTerminalRequest, error) {
	m := new(BidirectionalTerminalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Environment_CreateRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnvironmentServer).CreateRoom(&environmentCreateRoomServer{stream})
}

type Environment_CreateRoomServer interface {
	Send(*CreateRoomResponse) error
	Recv() (*CreateRoomRequest, error)
	grpc.ServerStream
}

type environmentCreateRoomServer struct {
	grpc.ServerStream
}

func (x *environmentCreateRoomServer) Send(m *CreateRoomResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *environmentCreateRoomServer) Recv() (*CreateRoomRequest, error) {
	m := new(CreateRoomRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Environment_ServiceDesc is the grpc.ServiceDesc for Environment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Environment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scholarlabs.services.environment.Environment",
	HandlerType: (*EnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnvironment",
			Handler:    _Environment_CreateEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironmentsForUser",
			Handler:    _Environment_GetEnvironmentsForUser_Handler,
		},
		{
			MethodName: "GetEnvironmentDetails",
			Handler:    _Environment_GetEnvironmentDetails_Handler,
		},
		{
			MethodName: "GetPublicPrototypes",
			Handler:    _Environment_GetPublicPrototypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalTerminal",
			Handler:       _Environment_BidirectionalTerminal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateRoom",
			Handler:       _Environment_CreateRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/environment.proto",
}
