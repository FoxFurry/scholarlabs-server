syntax = "proto3";

package scholarlabs.services.course;

option go_package = "github.com/FoxFurry/scholarlabs/services/course/proto";

import "google/protobuf/empty.proto";

service Courses {

  // For users
  rpc Enroll(EnrollRequest) returns (google.protobuf.Empty) {}      // Takes user id and course id and enrolls them
  rpc Unenroll(UnenrollRequest) returns (google.protobuf.Empty) {}  // Takes user id and course id and unenrolls them

  rpc GetEnrolledCoursesForUser(GetEnrolledCoursesForUserRequest) returns (GetEnrolledCoursesForUserResponse) {} // Get all courses user is enrolled to
  // rpc GetCourseProgress(GetCourseProgressRequest) returns (GetCourseProgressResponse) {}

  // For teachers
  rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse) {} // Create a course
  // rpc EditCourse(EditCourseRequest) returns (EditCourseResponse) {}     // Edit a course (idempotent, like PUT in REST)

  // For course
  rpc GetCourseToC(GetCourseToCRequest) returns (GetCourseToCResponse) {} // Get table of contents (list of lessons
  rpc GetCourseSummary(GetCourseSummaryRequest) returns (GetCourseSummaryResponse) {} // Get page (lesson or assignment
  rpc GetCourseDashboard(GetCourseDashboardRequest) returns (GetCourseDashboardResponse) {} // Get generic course info (material, list of assignments and so on)
  rpc GetAllPublicCourses(google.protobuf.Empty) returns (GetAllPublicCoursesResponse) {} // Get all public courses

  // For page
  rpc GetPage(GetPageRequest) returns (GetPageResponse) {} // Get page (lesson or assignment)
  rpc CreatePage(CreatePageRequest) returns (google.protobuf.Empty) {} // Create page (lesson or assignment)
  rpc DeletePage(DeletePageRequest) returns (google.protobuf.Empty) {} // Delete page (lesson or assignment)
}

enum PageType {
  Unknown = 0;
  LESSON = 1;
  ASSIGNMENT = 2;
}

message AssignmentProgress {
  string UUID = 1;
  string AssignmentUUID = 2;
  string UserUUID = 3;
  string EnvironmentUUID = 4;
  uint64 Grade = 5;
}

message PageMetadata {
  uint64 ID = 1;
  string Title = 2;
  PageType Type = 3;
}


message CourseMetadata {
  string UUID = 1;
  string AuthorUUID = 2;
  string Title = 3;
  string ShortDescription = 4;
  string Thumbnail = 5;
}

message Course {
  CourseMetadata metadata = 1;
  string Description = 2;
  string Background = 3;
}


message EnrollRequest {
  string UserUUID = 1;
  string CourseUUID = 2;
}

message UnenrollRequest {
  string UserUUID = 1;
  string CourseUUID = 2;
}


message GetEnrolledCoursesForUserRequest {
  string UserUUID = 1;
}

message GetEnrolledCoursesForUserResponse {
  repeated CourseMetadata courses = 1;
}


//message GetCourseProgressRequest {
//
//}
//
//message GetCourseProgressResponse {
//
//}


message CreateCourseRequest {
  string UUID = 1;
  string AuthorUUID = 2;
  string Title = 3;
  string ShortDescription = 4;
  string Description = 5;
  bytes Thumbnail = 6;
  bytes Background = 7;
}

message CreateCourseResponse {
  string UUID = 1;
}

//message EditCourseRequest {
//
//}
//
//message EditCourseResponse {
//
//}


message GetCourseDashboardRequest {
  string CourseUUID = 1;
}

message GetCourseDashboardResponse {
  Course Course = 1;
  uint64 Progress = 2;
  repeated AssignmentProgress Assignments = 3;
}


message GetAllPublicCoursesResponse {
  repeated CourseMetadata courses = 1;
}


message GetCourseToCRequest {
  string CourseUUID = 1;
}

message GetCourseToCResponse {
  repeated PageMetadata pages = 1;
}


message GetCourseSummaryRequest {
  string CourseUUID = 1;
  string PageID = 2;
}

message GetCourseSummaryResponse {
  Course course = 1;
}


message GetPageRequest {
  string CourseUUID = 1;
  string PageID = 2;
}

message GetPageResponse {
  PageMetadata Metadata = 1;
  bytes Data = 2;
}


message CreatePageRequest {
  string CourseUUID = 1;
  string Title = 2;
  PageType Type = 3;
  bytes Data = 4;
}

message DeletePageRequest {
  string CourseUUID = 1;
  string PageID = 2;
}
